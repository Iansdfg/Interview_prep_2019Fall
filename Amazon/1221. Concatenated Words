class TrieNode:
    def __init__(self):
        self.children=[None]*26
        self.end=False
        
        
class Trie:
    def __init__(self):
        self.root = TrieNode()
        self.ans = []
        
    def get_index(self, char):
        return ord(char)-ord('a')
        
    def insert(self, string):
        node = self.root
        for char in string:
            index = self.get_index(char)
            if not node.children[index]:
                node.children[index] = TrieNode()
            node = node.children[index]
        node.end = True
        
    def search(self, string, cnt):
        node = self.root
        for i in range(len(string)):
            index = self.get_index(string[i])
            if not node.children[index]:
                return False 
            node = node.children[index]
            if node.end:
                self.search(string[i+1:], cnt+1)
        self.ans.append(cnt>1 and node == self.root)
        

class Solution:
    """
    @param words: List[str]
    @return: return List[str]
    """
    
    def findAllConcatenatedWordsInADict(self, words):
        # write your code here
        trie = Trie()
        ans = []
        for word in words:
            trie.insert(word)
            
        for word in words:
            trie.search(word, 0)
            if True in trie.ans:
                ans.append(word)
            trie.ans = []
            
        return ans 
            
